// If we did not define the syntax, it would take the syntax as proto2 by default
syntax = "proto3";

// This is where the autogenerated java classes are gonna be stored
package com.students_information.result.stubs;

import "google/protobuf/timestamp.proto";

// With this line, I am saying that create multiple classes rather than a single class
option java_multiple_files = true;

// Students grades are given either as PASS or FAIL.
enum Grade{
  PASS = 0;
  FAIL = 1;
  UNKNOWN=2;
}

message ResultCreateRequest{
  string school_id = 1;
  string student_id = 2;
  Grade maths = 3;
  Grade art = 4;
  Grade chemistry = 5;
}
message ResultCreateResponse{
  string school_id = 1;
  string student_id = 2;
  Grade maths = 3;
  Grade art = 4;
  Grade chemistry = 5;
  string create_id = 6;
  google.protobuf.Timestamp create_time = 7;
}

message ResultReadRequest{
  string school_id = 1;
  string student_id = 2;
}
message ResultReadResponse{
  string school_id = 1;
  string student_id = 2;
  Grade maths = 3;
  Grade art = 4;
  Grade chemistry = 5;
  string create_id = 6;
  google.protobuf.Timestamp create_time = 7;
  string update_id = 8;
  google.protobuf.Timestamp update_time = 9;
}

message ResultListAllRequest{
}
message ResultListResponse{
  repeated ResultReadResponse results = 1;
}

message ResultUpdateRequest{
  string school_id = 1;
  string student_id = 2;
  Grade maths = 3;
  Grade art = 4;
  Grade chemistry = 5;
}
message ResultUpdateResponse{
  string school_id = 1;
  string student_id = 2;
  Grade maths = 3;
  Grade art = 4;
  Grade chemistry = 5;
  string update_id = 6;
  google.protobuf.Timestamp update_time = 7;
}

message ResultDeleteRequest{
  string school_id = 1;
  string student_id = 2;
}
message ResultDeleteResponse{
  string school_id = 1;
  string student_id = 2;
  string delete_id = 3;
  google.protobuf.Timestamp delete_time = 4;
  int64 deletedCount = 5;
}

// Now let's define our service
service ResultService{
  rpc create(ResultCreateRequest) returns (ResultCreateResponse);
  rpc read(ResultReadRequest) returns (ResultReadResponse);
  rpc update(ResultUpdateRequest) returns (ResultUpdateResponse);
  rpc delete(ResultDeleteRequest) returns (ResultDeleteResponse);

  rpc listAll(ResultListAllRequest) returns (ResultListResponse);

}